---
# 二、K8S集群容器运行时 Containerd准备

# 2.1 Containerd部署文件获取
- name: Download containerd
  get_url:
    url: https://github.com/containerd/containerd/releases/download/v1.7.5/cri-containerd-1.7.5-linux-amd64.tar.gz
    dest: /tmp/cri-containerd-1.7.5-linux-amd64.tar.gz

- name: Extract containerd
  unarchive:
    src: /tmp/cri-containerd-1.7.5-linux-amd64.tar.gz
    dest: /
    remote_src: yes

# 2.2 Containerd配置文件生成并修改
- name: Create containerd configuration directory
  file:
    path: /etc/containerd
    state: directory

- name: Generate default containerd configuration
  command: containerd config default
  register: containerd_config
  args:
    creates: /etc/containerd/config.toml

- name: Modify containerd configuration
  lineinfile:
    path: /etc/containerd/config.toml
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
  with_items:
    - { regexp: '^sandbox_image = .+', line: 'sandbox_image = "registry.k8s.io/pause:3.9"' }
    - { regexp: '^SystemdCgroup = .+', line: 'SystemdCgroup = true' }

# 2.3 Containerd启动及开机自启动
- name: Enable and start containerd
  systemd:
    name: containerd
    enabled: yes
    state: started

# 三、K8S集群部署

# 3.1 K8S集群软件apt源准备
- name: Add Kubernetes apt key
  apt_key:
    url: https://mirrors.aliyun.com/kubernetes-new/core/stable/v1.29/deb/Release.key
    state: present

- name: Add Kubernetes apt repository
  apt_repository:
    repo: "deb https://mirrors.aliyun.com/kubernetes-new/core/stable/v1.29/deb/ /"
    state: present

- name: Update apt cache
  apt:
    update_cache: yes

# 3.2 K8S集群软件安装
- name: Install Kubernetes packages
  apt:
    name:
      - kubelet
      - kubeadm
      - kubectl
    state: present

- name: Hold Kubernetes packages
  apt:
    name:
      - kubelet
      - kubeadm
      - kubectl
    state: present
    mark: hold

# 3.3 K8S集群初始化
- name: Create kubeadm configuration file
  copy:
    dest: /root/kubeadm-config.yaml
    content: |
      apiVersion: kubeadm.k8s.io/v1beta3
      bootstrapTokens:
      - groups:
        - system:bootstrappers:kubeadm:default-node-token
        token: abcdef.0123456789abcdef
        ttl: 24h0m0s
        usages:
        - signing
        - authentication
      kind: InitConfiguration
      localAPIEndpoint:
        advertiseAddress: 192.168.10.140
        bindPort: 6443
      nodeRegistration:
        criSocket: unix:///var/run/containerd/containerd.sock
        imagePullPolicy: IfNotPresent
        name: master1
        taints: null
      ---
      apiServer:
        timeoutForControlPlane: 4m0s
      apiVersion: kubeadm.k8s.io/v1beta3
      certificatesDir: /etc/kubernetes/pki
      clusterName: kubernetes
      controllerManager: {}
      dns: {}
      etcd:
        local:
          dataDir: /var/lib/etcd
      imageRepository: registry.k8s.io
      kind: ClusterConfiguration
      kubernetesVersion: 1.28.1
      networking:
        dnsDomain: cluster.local
        serviceSubnet: 10.96.0.0/12
        podSubnet: 10.244.0.0/16
      scheduler: {}

- name: Initialize Kubernetes master
  command: kubeadm init --config=/root/kubeadm-config.yaml
  register: kubeadm_output

- name: Create .kube directory
  file:
    path: /root/.kube
    state: directory
    mode: '0755'

- name: Copy admin.conf to .kube/config
  copy:
    src: /etc/kubernetes/admin.conf
    dest: /root/.kube/config
    remote_src: yes

- name: Install Calico networking
  shell: kubectl apply -f https://docs.projectcalico.org/v3.25/manifests/calico.yaml

- name: Output join command
  debug:
    msg: "{{ kubeadm_output.stdout_lines | select('search', 'kubeadm join') | list }}"
  register: join_command

- name: Save join command
  copy:
    content: "{{ join_command.msg | join('\n') }}"
    dest: /root/kubeadm_join_command.sh
    mode: '0755'
