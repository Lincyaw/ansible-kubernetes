---
# 1.3.1 主机名配置
- name: Set hostname
  hostname:
    name: "{{ inventory_hostname }}"

# 1.3.2 主机IP地址配置
- name: Configure network interfaces
  copy:
    dest: /etc/netplan/01-network-manager-all.yaml
    content: |
      network:
        version: 2
        ethernets:
          ens33:
            dhcp4: no
            addresses:
              - "{{ ansible_host }}/24"
            routes:
              - to: default
                via: "{{ gateway }}"
            nameservers:
              addresses: [119.29.29.29, 114.114.114.114, 8.8.8.8, {{ dns }}]
  notify: Apply network configuration
  when: ansible_distribution == 'Ubuntu'

- name: Apply network configuration
  command: netplan apply
  when: ansible_distribution == 'Ubuntu'

# 1.3.2 主机IP地址配置
- name: Configure network interfaces for Debian
  copy:
    dest: /etc/network/interfaces
    content: |
      # This file describes the network interfaces available on your system
      # and how to activate them. For more information, see interfaces(5).

      source /etc/network/interfaces.d/*

      # The loopback network interface
      auto lo
      iface lo inet loopback

      # The primary network interface
      allow-hotplug ens18
      iface ens18 inet static
        address {{ ansible_host }}
        netmask 255.255.255.0
        gateway {{ gateway }}
        dns-nameservers {{ dns }} 119.29.29.29 114.114.114.114 8.8.8.8 
  notify: Restart networking
  when: ansible_distribution == 'Debian'

# 1.3.3 主机名与IP地址解析
- name: Add host entries
  lineinfile:
    path: /etc/hosts
    line: "{{ item.ip }} {{ item.hostname }}"
    state: present
  with_items: "{{ node_peers }}"

# 1.3.4 时间同步配置
- name: Set timezone to Asia/Shanghai
  command: timedatectl set-timezone Asia/Shanghai

- name: Install ntpdate
  apt:
    name: ntpdate
    state: present

- name: Sync time with ntp server
  cron:
    name: "ntpdate"
    minute: "0"
    hour: "*/1"
    job: "ntpdate time1.aliyun.com"

# 1.3.5 配置内核转发及网桥过滤
- name: Load kernel modules
  modprobe:
    name: "{{ item }}"
  with_items:
    - overlay
    - br_netfilter

- name: Ensure kernel modules are loaded at boot
  copy:
    dest: /etc/modules-load.d/k8s.conf
    content: |
      overlay
      br_netfilter

- name: Set sysctl parameters
  copy:
    dest: /etc/sysctl.d/k8s.conf
    content: |
      net.bridge.bridge-nf-call-ip6tables = 1
      net.bridge.bridge-nf-call-iptables = 1
      net.ipv4.ip_forward = 1

- name: Apply sysctl parameters
  command: sysctl --system
  
# 1.3.6 安装ipset及ipvsadm
- name: Install ipset and ipvsadm
  apt:
    name: 
      - ipset
      - ipvsadm
    state: present

- name: Ensure IPVS modules are loaded at boot
  copy:
    dest: /etc/modules-load.d/ipvs.conf
    content: |
      ip_vs
      ip_vs_rr
      ip_vs_wrr
      ip_vs_sh
      nf_conntrack

- name: Load IPVS modules
  shell: |
    modprobe -- ip_vs
    modprobe -- ip_vs_rr
    modprobe -- ip_vs_wrr
    modprobe -- ip_vs_sh
    modprobe -- nf_conntrack

# 1.3.7 关闭SWAP分区
- name: Disable swap
  command: swapoff -a

- name: Ensure swap is disabled on boot
  replace:
    path: /etc/fstab
    regexp: '^\s*([^#\n]+?\s+?swap\s+?[^#\n]+?[\n#])'
    replace: '#\1'


# 二、K8S集群容器运行时 Containerd准备
# 2.1 Containerd部署文件获取
- name: Check if containerd tarball exists
  stat:
    path: "{{ containerd_dest }}"
  register: containerd_tarball

- name: Download containerd
  get_url:
    url: "{{ containerd_url }}"
    dest: "{{ containerd_dest }}"
  when: not containerd_tarball.stat.exists

- name: Extract containerd
  unarchive:
    src: "{{ containerd_dest }}"
    dest: "{{ containerd_extract_dest }}"
    remote_src: yes
  when: not containerd_tarball.stat.exists

# 2.2 Containerd配置文件生成并修改
- name: Create containerd configuration directory
  file:
    path: /etc/containerd
    state: directory

- name: Generate default containerd configuration
  shell: containerd config default > /etc/containerd/config.toml
  register: containerd_config
  args:
    creates: /etc/containerd/config.toml

- name: Modify containerd configuration
  lineinfile:
    path: /etc/containerd/config.toml
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
  with_items:
    - { regexp: '^sandbox_image = .+', line: 'sandbox_image = "registry.k8s.io/pause:3.9"' }
    - { regexp: '^SystemdCgroup = .+', line: 'SystemdCgroup = true' }

# 2.3 Containerd启动及开机自启动
- name: Enable and start containerd
  systemd:
    name: containerd
    enabled: yes
    state: started

# 三、K8S集群部署

# 3.1 K8S集群软件apt源准备
- name: Ensure gnupg is installed
  apt:
    name: gnupg
    state: present

- name: Add Kubernetes apt key
  apt_key:
    url: "{{ k8s_apt_key }}"
    state: present

- name: Add Kubernetes apt repository
  apt_repository:
    repo: "deb {{ k8s_apt_repo }} /"
    state: present

- name: Update apt cache
  apt:
    update_cache: yes

# 3.2 K8S集群软件安装
- name: Install Kubernetes packages
  apt:
    name:
      - kubelet
      - kubeadm
      - kubectl
      - wget
      - curl
    state: present

- name: Hold Kubernetes packages
  command: apt-mark hold {{ item }}
  with_items:
    - kubelet
    - kubeadm
    - kubectl
